{
  "models": [
    {
      "name": "quadcopter_nonlinear",
      "description": "A nonlinear model of a quadcopter capturing rotor dynamics, aerodynamic forces, and control inputs.",
      "parameters": [
        {
          "port": {
            "dimension": [
              1
            ],
            "name": "mass",
            "unit": "kg",
            "description": "Mass of the quadcopter."
          },
          "value": [
            1.5
          ]
        },
        {
          "port": {
            "dimension": [
              1
            ],
            "name": "gravity",
            "unit": "m/s^2",
            "description": "Acceleration due to gravity."
          },
          "value": [
            9.81
          ]
        },
        {
          "port": {
            "dimension": [
              1
            ],
            "name": "arm_length",
            "unit": "m",
            "description": "Distance from the center to the rotor."
          },
          "value": [
            0.25
          ]
        },
        {
          "port": {
            "dimension": [
              1
            ],
            "name": "drag_coefficient",
            "unit": "",
            "description": "Aerodynamic drag coefficient."
          },
          "value": [
            0.1
          ]
        }
      ],
      "inputs": [
        {
          "dimension": [
            1
          ],
          "name": "thrust",
          "unit": "N",
          "description": "Total thrust generated by the rotors."
        },
        {
          "dimension": [
            1
          ],
          "name": "torque_x",
          "unit": "Nm",
          "description": "Torque around the x-axis."
        },
        {
          "dimension": [
            1
          ],
          "name": "torque_y",
          "unit": "Nm",
          "description": "Torque around the y-axis."
        },
        {
          "dimension": [
            1
          ],
          "name": "torque_z",
          "unit": "Nm",
          "description": "Torque around the z-axis."
        }
      ],
      "outputs": [
        {
          "dimension": [
            1
          ],
          "name": "position_x",
          "unit": "m",
          "description": "Position along the x-axis."
        },
        {
          "dimension": [
            1
          ],
          "name": "position_y",
          "unit": "m",
          "description": "Position along the y-axis."
        },
        {
          "dimension": [
            1
          ],
          "name": "position_z",
          "unit": "m",
          "description": "Position along the z-axis."
        }
      ],
      "states": [
        {
          "dimension": [
            1
          ],
          "name": "velocity_x",
          "unit": "m/s",
          "description": "Velocity along the x-axis."
        },
        {
          "dimension": [
            1
          ],
          "name": "velocity_y",
          "unit": "m/s",
          "description": "Velocity along the y-axis."
        },
        {
          "dimension": [
            1
          ],
          "name": "velocity_z",
          "unit": "m/s",
          "description": "Velocity along the z-axis."
        },
        {
          "dimension": [
            1
          ],
          "name": "orientation_phi",
          "unit": "rad",
          "description": "Roll angle."
        },
        {
          "dimension": [
            1
          ],
          "name": "orientation_theta",
          "unit": "rad",
          "description": "Pitch angle."
        },
        {
          "dimension": [
            1
          ],
          "name": "orientation_psi",
          "unit": "rad",
          "description": "Yaw angle."
        },
        {
          "dimension": [
            1
          ],
          "name": "angular_velocity_x",
          "unit": "rad/s",
          "description": "Angular velocity around the x-axis."
        },
        {
          "dimension": [
            1
          ],
          "name": "angular_velocity_y",
          "unit": "rad/s",
          "description": "Angular velocity around the y-axis."
        },
        {
          "dimension": [
            1
          ],
          "name": "angular_velocity_z",
          "unit": "rad/s",
          "description": "Angular velocity around the z-axis."
        }
      ],
      "equations": {
        "linear_model": null,
        "nonlinear_model": {
          "dynamics_python": "def dynamics(t, x, u, params):\n    # Unpack states\n    velocity_x, velocity_y, velocity_z = x[0], x[1], x[2]\n    orientation_phi, orientation_theta, orientation_psi = x[3], x[4], x[5]\n    angular_velocity_x, angular_velocity_y, angular_velocity_z = x[6], x[7], x[8]\n\n    # Unpack inputs\n    thrust, torque_x, torque_y, torque_z = u[0], u[1], u[2], u[3]\n\n    # Unpack parameters\n    mass = params['mass']\n    gravity = params['gravity']\n    arm_length = params['arm_length']\n    drag_coefficient = params['drag_coefficient']\n\n    # Dynamics equations\n    # Translational dynamics\n    acceleration_x = (thrust / mass) * (sin(orientation_theta) * cos(orientation_psi)) - drag_coefficient * velocity_x\n    acceleration_y = (thrust / mass) * (sin(orientation_theta) * sin(orientation_psi)) - drag_coefficient * velocity_y\n    acceleration_z = (thrust / mass) * cos(orientation_theta) - gravity - drag_coefficient * velocity_z\n\n    # Rotational dynamics\n    angular_acceleration_x = torque_x / (mass * arm_length)\n    angular_acceleration_y = torque_y / (mass * arm_length)\n    angular_acceleration_z = torque_z / (mass * arm_length)\n\n    # Return state derivatives\n    return [acceleration_x, acceleration_y, acceleration_z,\n            angular_velocity_x, angular_velocity_y, angular_velocity_z,\n            angular_acceleration_x, angular_acceleration_y, angular_acceleration_z]",
          "output_python": "def outputs(t, x, u, params):\n    # Unpack states\n    position_x, position_y, position_z = x[0], x[1], x[2]\n\n    # Return outputs\n    return [position_x, position_y, position_z]"
        },
        "algebraic_model": null,
        "packages": [
          "import numpy as np",
          "import control as ct"
        ]
      }
    },
    {
      "name": "quadcopter_rotor_conversion",
      "description": "Converts angular rate commands to thrust and torque inputs using rotor dynamics.",
      "parameters": [
        {
          "port": {
            "dimension": [
              1
            ],
            "name": "kf",
            "unit": "N*m^2",
            "description": "Thrust coefficient"
          },
          "value": [
            1e-6
          ]
        },
        {
          "port": {
            "dimension": [
              1
            ],
            "name": "kd",
            "unit": "N*m^2",
            "description": "Drag coefficient"
          },
          "value": [
            1e-8
          ]
        },
        {
          "port": {
            "dimension": [
              1
            ],
            "name": "l",
            "unit": "m",
            "description": "Arm length"
          },
          "value": [
            0.15
          ]
        },
        {
          "port": {
            "dimension": [
              1
            ],
            "name": "w_max",
            "unit": "rad/s",
            "description": "Maximum angular velocity"
          },
          "value": [
            500.0
          ]
        }
      ],
      "inputs": [
        {
          "dimension": [
            1
          ],
          "name": "omega",
          "unit": "rad/s",
          "description": "Angular rate command"
        }
      ],
      "outputs": [
        {
          "dimension": [
            1
          ],
          "name": "thrust",
          "unit": "N",
          "description": "Thrust output"
        },
        {
          "dimension": [
            1
          ],
          "name": "torque",
          "unit": "N*m",
          "description": "Torque output"
        }
      ],
      "states": null,
      "equations": {
        "linear_model": null,
        "nonlinear_model": null,
        "algebraic_model": {
          "output_python": "import numpy as np\nimport control as ct\n\ndef outputs(t, x, u, params):\n    # Extract parameters\n    kf = params['kf']\n    kd = params['kd']\n    l = params['l']\n    w_max = params['w_max']\n    \n    # Extract input\n    omega = u[0]\n    \n    # Calculate omega squared\n    omega_squared = np.clip(omega, 0, w_max)**2\n    \n    # Calculate thrust and torque\n    thrust = kf * omega_squared\n    torque = kd * omega_squared * l\n    \n    return [thrust, torque]"
        },
        "packages": [
          "import numpy as np",
          "import control as ct"
        ]
      }
    }
  ],
  "subsystems": [
    {
      "name": "quadcopter",
      "description": "A complete quadcopter system combining rotor conversion and nonlinear dynamics.",
      "components": [
        {
          "name": "quadcopter_rotor_conversion",
          "connections": [
            {
              "destination_port_name": "omega",
              "destination_port_indices": [],
              "source_ports": [
                {
                  "component_name": "External",
                  "port_name": "omega",
                  "gain": 1.0,
                  "indices": []
                }
              ]
            }
          ]
        },
        {
          "name": "quadcopter_nonlinear",
          "connections": [
            {
              "destination_port_name": "thrust",
              "destination_port_indices": [],
              "source_ports": [
                {
                  "component_name": "quadcopter_rotor_conversion",
                  "port_name": "thrust",
                  "gain": 1.0,
                  "indices": []
                }
              ]
            },
            {
              "destination_port_name": "torque_x",
              "destination_port_indices": [],
              "source_ports": [
                {
                  "component_name": "quadcopter_rotor_conversion",
                  "port_name": "torque",
                  "gain": 1.0,
                  "indices": []
                }
              ]
            },
            {
              "destination_port_name": "torque_y",
              "destination_port_indices": [],
              "source_ports": [
                {
                  "component_name": "quadcopter_rotor_conversion",
                  "port_name": "torque",
                  "gain": 1.0,
                  "indices": []
                }
              ]
            },
            {
              "destination_port_name": "torque_z",
              "destination_port_indices": [],
              "source_ports": [
                {
                  "component_name": "quadcopter_rotor_conversion",
                  "port_name": "torque",
                  "gain": 1.0,
                  "indices": []
                }
              ]
            }
          ]
        }
      ],
      "inputs": [
        {
          "dimension": [
            1
          ],
          "name": "omega",
          "unit": "rad/s",
          "description": "Angular rate command for the rotors."
        }
      ],
      "outputs": [
        {
          "port": {
            "dimension": [
              1
            ],
            "name": "position_x",
            "unit": "m",
            "description": "Position along the x-axis."
          },
          "source_ports": [
            {
              "component_name": "quadcopter_nonlinear",
              "port_name": "position_x",
              "gain": 1.0,
              "indices": []
            }
          ]
        },
        {
          "port": {
            "dimension": [
              1
            ],
            "name": "position_y",
            "unit": "m",
            "description": "Position along the y-axis."
          },
          "source_ports": [
            {
              "component_name": "quadcopter_nonlinear",
              "port_name": "position_y",
              "gain": 1.0,
              "indices": []
            }
          ]
        },
        {
          "port": {
            "dimension": [
              1
            ],
            "name": "position_z",
            "unit": "m",
            "description": "Position along the z-axis."
          },
          "source_ports": [
            {
              "component_name": "quadcopter_nonlinear",
              "port_name": "position_z",
              "gain": 1.0,
              "indices": []
            }
          ]
        }
      ]
    }
  ]
}